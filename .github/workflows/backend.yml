name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 22
      uses: actions/setup-java@v4
      with:
        java-version: '22'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew
      
    - name: Run tests
      run: cd backend && ./gradlew test -Dspring.profiles.active=test
      
    - name: Build application
      run: cd backend && ./gradlew build -x test
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/build/libs/*.jar
        retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      SERVICE_NAME: preffy-backend
      REGION: us-central1
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 22
      uses: actions/setup-java@v4
      with:
        java-version: '22'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew
      
    - name: Build application
      run: cd backend && ./gradlew build -x test
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker
      
    - name: Build and push Docker image
      run: |
        cd backend
        IMAGE_TAG="us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/<ARTIFACT_REGISTRY_REPO>/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        echo "Building image: $IMAGE_TAG"
        docker build -t $IMAGE_TAG .
        echo "Pushing image to GCR..."
        docker push $IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        
    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image $IMAGE_TAG \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="SPRING_PROFILES_ACTIVE=production" \
          --set-env-vars="DB_HOST=${{ secrets.DB_HOST }}" \
          --set-env-vars="DB_PORT=3306" \
          --set-env-vars="DB_NAME=${{ secrets.DB_NAME }}" \
          --set-env-vars="DB_USER=${{ secrets.DB_USER }}" \
          --set-env-vars="DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
          --set-env-vars="JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars="GCS_BUCKET=${{ secrets.GCS_BUCKET }}" \
          --set-env-vars="API_URL=${{ secrets.API_URL }}" \
          --add-cloudsql-instances="${{ env.PROJECT_ID }}:${{ env.REGION }}:preffy-db" \
          --memory=1Gi \
          --cpu=1 \
          --concurrency=80 \
          --max-instances=10 \
          --timeout=300 \
          --quiet
          
    - name: Verify deployment
      run: |
        echo "Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(status.url)")
        echo "Service deployed at: $SERVICE_URL"
        
        echo "Testing health endpoint..."
        curl -f "$SERVICE_URL/api/health" || {
          echo "Health check failed!"
          exit 1
        }
        
        echo "‚úÖ Deployment successful!"
        echo "üöÄ API is available at: $SERVICE_URL/api"
        echo "üîç Health check: $SERVICE_URL/api/health"
