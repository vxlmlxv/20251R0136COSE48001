name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-west2
  REPOSITORY: preffy-video-flow
  SERVICE: preffy-backend
  REGION: us-west2

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
        service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        version: 'latest'

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Create Artifact Registry repository if not exists
      run: |
        gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
          --location=${{ env.GAR_LOCATION }} || \
        gcloud artifacts repositories create ${{ env.REPOSITORY }} \
          --repository-format=docker \
          --location=${{ env.GAR_LOCATION }} \
          --description="Preffy Video Flow Docker images"

    - name: Build and Push Container
      run: |
        cd backend
        docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" .
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

    - name: Deploy to Cloud Run (Staging)
      if: github.event.inputs.environment == 'staging' || github.ref == 'refs/heads/main'
      run: |
        gcloud run deploy ${{ env.SERVICE }}-staging \
          --image "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars "SPRING_PROFILES_ACTIVE=production" \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}" \
          --set-env-vars "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" \
          --set-env-vars "DB_USER=${{ secrets.DB_USER }}" \
          --set-env-vars "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
          --set-env-vars "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars "CLOUDSQL_INSTANCE_CONNECTION_NAME=${{ secrets.CLOUDSQL_INSTANCE_CONNECTION_NAME }}" \
          --set-cloudsql-instances "${{ secrets.CLOUDSQL_INSTANCE_CONNECTION_NAME }}" \
          --service-account "${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }}"

    - name: Deploy to Cloud Run (Production)
      if: github.event.inputs.environment == 'production'
      run: |
        gcloud run deploy ${{ env.SERVICE }} \
          --image "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}" \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 1 \
          --max-instances 20 \
          --set-env-vars "SPRING_PROFILES_ACTIVE=production" \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}" \
          --set-env-vars "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" \
          --set-env-vars "DB_USER=${{ secrets.DB_USER }}" \
          --set-env-vars "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
          --set-env-vars "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
          --set-env-vars "CLOUDSQL_INSTANCE_CONNECTION_NAME=${{ secrets.CLOUDSQL_INSTANCE_CONNECTION_NAME }}" \
          --set-env-vars "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}" \
          --set-env-vars "BODY_FEEDBACK_API_URL=${{ secrets.BODY_FEEDBACK_API_URL }}" \
          --set-env-vars "SCRIPT_FEEDBACK_API_URL=${{ secrets.SCRIPT_FEEDBACK_API_URL }}" \
          --set-cloudsql-instances "${{ secrets.CLOUDSQL_INSTANCE_CONNECTION_NAME }}" \
          --service-account "${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }}"

    - name: Get Service URL
      run: |
        SERVICE_NAME="${{ env.SERVICE }}"
        if [ "${{ github.event.inputs.environment }}" = "staging" ] || [ "${{ github.ref }}" = "refs/heads/main" ]; then
          SERVICE_NAME="${{ env.SERVICE }}-staging"
        fi
        
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
          --region ${{ env.REGION }} \
          --format "value(status.url)")
        
        echo "Service URL: $SERVICE_URL"
        echo "Health Check: $SERVICE_URL/actuator/health"
        
        # Test health endpoint
        curl -f "$SERVICE_URL/actuator/health" || echo "Health check failed"

    - name: Notify Deployment
      if: success()
      run: |
        echo "‚úÖ Deployment to ${{ github.event.inputs.environment || 'staging' }} completed successfully!"
        echo "üöÄ Service is now running on Cloud Run"

    - name: Rollback on Failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed. Consider rolling back if this is a production deployment."
        echo "Use: gcloud run services replace-traffic ${{ env.SERVICE }} --to-revisions=PREVIOUS_REVISION=100"
